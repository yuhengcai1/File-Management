// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package DB

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createDocumentStmt, err = db.PrepareContext(ctx, createDocument); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDocument: %w", err)
	}
	if q.createUsersStmt, err = db.PrepareContext(ctx, createUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUsers: %w", err)
	}
	if q.createadminStmt, err = db.PrepareContext(ctx, createadmin); err != nil {
		return nil, fmt.Errorf("error preparing query Createadmin: %w", err)
	}
	if q.createnormalStmt, err = db.PrepareContext(ctx, createnormal); err != nil {
		return nil, fmt.Errorf("error preparing query Createnormal: %w", err)
	}
	if q.deleteAdminStmt, err = db.PrepareContext(ctx, deleteAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAdmin: %w", err)
	}
	if q.deleteDocumentAdminStmt, err = db.PrepareContext(ctx, deleteDocumentAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDocumentAdmin: %w", err)
	}
	if q.deleteDocumentNormalStmt, err = db.PrepareContext(ctx, deleteDocumentNormal); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDocumentNormal: %w", err)
	}
	if q.deleteNormalStmt, err = db.PrepareContext(ctx, deleteNormal); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNormal: %w", err)
	}
	if q.deleteusersStmt, err = db.PrepareContext(ctx, deleteusers); err != nil {
		return nil, fmt.Errorf("error preparing query Deleteusers: %w", err)
	}
	if q.getAdminByIDStmt, err = db.PrepareContext(ctx, getAdminByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdminByID: %w", err)
	}
	if q.getDocumentByCreatebyNormalStmt, err = db.PrepareContext(ctx, getDocumentByCreatebyNormal); err != nil {
		return nil, fmt.Errorf("error preparing query GetDocumentByCreatebyNormal: %w", err)
	}
	if q.getDocumentByIDStmt, err = db.PrepareContext(ctx, getDocumentByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetDocumentByID: %w", err)
	}
	if q.getNormalByCreatebyStmt, err = db.PrepareContext(ctx, getNormalByCreateby); err != nil {
		return nil, fmt.Errorf("error preparing query GetNormalByCreateby: %w", err)
	}
	if q.getNormalByIDStmt, err = db.PrepareContext(ctx, getNormalByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetNormalByID: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.updateNormalStmt, err = db.PrepareContext(ctx, updateNormal); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNormal: %w", err)
	}
	if q.updateUsersStmt, err = db.PrepareContext(ctx, updateUsers); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUsers: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createDocumentStmt != nil {
		if cerr := q.createDocumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDocumentStmt: %w", cerr)
		}
	}
	if q.createUsersStmt != nil {
		if cerr := q.createUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUsersStmt: %w", cerr)
		}
	}
	if q.createadminStmt != nil {
		if cerr := q.createadminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createadminStmt: %w", cerr)
		}
	}
	if q.createnormalStmt != nil {
		if cerr := q.createnormalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createnormalStmt: %w", cerr)
		}
	}
	if q.deleteAdminStmt != nil {
		if cerr := q.deleteAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAdminStmt: %w", cerr)
		}
	}
	if q.deleteDocumentAdminStmt != nil {
		if cerr := q.deleteDocumentAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDocumentAdminStmt: %w", cerr)
		}
	}
	if q.deleteDocumentNormalStmt != nil {
		if cerr := q.deleteDocumentNormalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDocumentNormalStmt: %w", cerr)
		}
	}
	if q.deleteNormalStmt != nil {
		if cerr := q.deleteNormalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNormalStmt: %w", cerr)
		}
	}
	if q.deleteusersStmt != nil {
		if cerr := q.deleteusersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteusersStmt: %w", cerr)
		}
	}
	if q.getAdminByIDStmt != nil {
		if cerr := q.getAdminByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdminByIDStmt: %w", cerr)
		}
	}
	if q.getDocumentByCreatebyNormalStmt != nil {
		if cerr := q.getDocumentByCreatebyNormalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDocumentByCreatebyNormalStmt: %w", cerr)
		}
	}
	if q.getDocumentByIDStmt != nil {
		if cerr := q.getDocumentByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDocumentByIDStmt: %w", cerr)
		}
	}
	if q.getNormalByCreatebyStmt != nil {
		if cerr := q.getNormalByCreatebyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNormalByCreatebyStmt: %w", cerr)
		}
	}
	if q.getNormalByIDStmt != nil {
		if cerr := q.getNormalByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNormalByIDStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.updateNormalStmt != nil {
		if cerr := q.updateNormalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNormalStmt: %w", cerr)
		}
	}
	if q.updateUsersStmt != nil {
		if cerr := q.updateUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUsersStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	createDocumentStmt              *sql.Stmt
	createUsersStmt                 *sql.Stmt
	createadminStmt                 *sql.Stmt
	createnormalStmt                *sql.Stmt
	deleteAdminStmt                 *sql.Stmt
	deleteDocumentAdminStmt         *sql.Stmt
	deleteDocumentNormalStmt        *sql.Stmt
	deleteNormalStmt                *sql.Stmt
	deleteusersStmt                 *sql.Stmt
	getAdminByIDStmt                *sql.Stmt
	getDocumentByCreatebyNormalStmt *sql.Stmt
	getDocumentByIDStmt             *sql.Stmt
	getNormalByCreatebyStmt         *sql.Stmt
	getNormalByIDStmt               *sql.Stmt
	getUserByIDStmt                 *sql.Stmt
	updateNormalStmt                *sql.Stmt
	updateUsersStmt                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		createDocumentStmt:              q.createDocumentStmt,
		createUsersStmt:                 q.createUsersStmt,
		createadminStmt:                 q.createadminStmt,
		createnormalStmt:                q.createnormalStmt,
		deleteAdminStmt:                 q.deleteAdminStmt,
		deleteDocumentAdminStmt:         q.deleteDocumentAdminStmt,
		deleteDocumentNormalStmt:        q.deleteDocumentNormalStmt,
		deleteNormalStmt:                q.deleteNormalStmt,
		deleteusersStmt:                 q.deleteusersStmt,
		getAdminByIDStmt:                q.getAdminByIDStmt,
		getDocumentByCreatebyNormalStmt: q.getDocumentByCreatebyNormalStmt,
		getDocumentByIDStmt:             q.getDocumentByIDStmt,
		getNormalByCreatebyStmt:         q.getNormalByCreatebyStmt,
		getNormalByIDStmt:               q.getNormalByIDStmt,
		getUserByIDStmt:                 q.getUserByIDStmt,
		updateNormalStmt:                q.updateNormalStmt,
		updateUsersStmt:                 q.updateUsersStmt,
	}
}
