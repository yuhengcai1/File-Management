// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: admin.sql

package DB

import (
	"context"
	"database/sql"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO document (
  documentid,name,createdby
) VALUES (
  $1,$2,$3
)
RETURNING documentid, name, created_at, createdby
`

type CreateDocumentParams struct {
	Documentid int32         `json:"documentid"`
	Name       string        `json:"name"`
	Createdby  sql.NullInt32 `json:"createdby"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.queryRow(ctx, q.createDocumentStmt, createDocument, arg.Documentid, arg.Name, arg.Createdby)
	var i Document
	err := row.Scan(
		&i.Documentid,
		&i.Name,
		&i.CreatedAt,
		&i.Createdby,
	)
	return i, err
}

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (
  id,username,password
) VALUES (
  $1,$2,$3
)
RETURNING id, username, password, created_at
`

type CreateUsersParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.queryRow(ctx, q.createUsersStmt, createUsers, arg.ID, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const createadmin = `-- name: Createadmin :one
INSERT INTO admin (
  id
) VALUES (
  $1
)
RETURNING id
`

func (q *Queries) Createadmin(ctx context.Context, id int32) (int32, error) {
	row := q.queryRow(ctx, q.createadminStmt, createadmin, id)
	err := row.Scan(&id)
	return id, err
}

const createnormal = `-- name: Createnormal :one
INSERT INTO normal (
  id,createdby
) VALUES (
  $1,$2
)
RETURNING id, createdby
`

type CreatenormalParams struct {
	ID        int32         `json:"id"`
	Createdby sql.NullInt32 `json:"createdby"`
}

func (q *Queries) Createnormal(ctx context.Context, arg CreatenormalParams) (Normal, error) {
	row := q.queryRow(ctx, q.createnormalStmt, createnormal, arg.ID, arg.Createdby)
	var i Normal
	err := row.Scan(&i.ID, &i.Createdby)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec

DELETE FROM admin WHERE id = $1
`

// All Delete operations
func (q *Queries) DeleteAdmin(ctx context.Context, id int32) error {

	
	_, err := q.exec(ctx, q.deleteAdminStmt, deleteAdmin, id)
	return err
}

const deleteDocumentAdmin = `-- name: DeleteDocumentAdmin :exec
DELETE FROM document WHERE documentid = $1
`

func (q *Queries) DeleteDocumentAdmin(ctx context.Context, documentid int32) error {
	_, err := q.exec(ctx, q.deleteDocumentAdminStmt, deleteDocumentAdmin, documentid)
	return err
}

const deleteDocumentNormal = `-- name: DeleteDocumentNormal :exec
DELETE FROM document WHERE documentid = $1 AND createdby = $2
`

type DeleteDocumentNormalParams struct {
	Documentid int32         `json:"documentid"`
	Createdby  sql.NullInt32 `json:"createdby"`
}

func (q *Queries) DeleteDocumentNormal(ctx context.Context, arg DeleteDocumentNormalParams) error {
	_, err := q.exec(ctx, q.deleteDocumentNormalStmt, deleteDocumentNormal, arg.Documentid, arg.Createdby)
	return err
}

const deleteNormal = `-- name: DeleteNormal :exec
DELETE FROM normal WHERE id = $1
`

func (q *Queries) DeleteNormal(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteNormalStmt, deleteNormal, id)
	return err
}

const deleteusers = `-- name: Deleteusers :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) Deleteusers(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteusersStmt, deleteusers, id)
	return err
}

const getAdminByID = `-- name: GetAdminByID :one
SELECT id FROM admin
WHERE id = $1
`

// All Get operations
func (q *Queries) GetAdminByID(ctx context.Context, id int32) (int32, error) {
	row := q.queryRow(ctx, q.getAdminByIDStmt, getAdminByID, id)
	err := row.Scan(&id)
	return id, err
}

const getDocumentByCreatebyNormal = `-- name: GetDocumentByCreatebyNormal :many
SELECT documentid, name, created_at, createdby FROM document WHERE documentid = $1 AND createdby = $2
`

type GetDocumentByCreatebyNormalParams struct {
	Documentid int32         `json:"documentid"`
	Createdby  sql.NullInt32 `json:"createdby"`
}

func (q *Queries) GetDocumentByCreatebyNormal(ctx context.Context, arg GetDocumentByCreatebyNormalParams) ([]Document, error) {
	rows, err := q.query(ctx, q.getDocumentByCreatebyNormalStmt, getDocumentByCreatebyNormal, arg.Documentid, arg.Createdby)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.Documentid,
			&i.Name,
			&i.CreatedAt,
			&i.Createdby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentByID = `-- name: GetDocumentByID :many
SELECT documentid, name, created_at, createdby FROM document WHERE documentid = $1
`

func (q *Queries) GetDocumentByID(ctx context.Context, documentid int32) ([]Document, error) {
	rows, err := q.query(ctx, q.getDocumentByIDStmt, getDocumentByID, documentid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.Documentid,
			&i.Name,
			&i.CreatedAt,
			&i.Createdby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNormalByCreateby = `-- name: GetNormalByCreateby :many
SELECT id, createdby FROM normal
WHERE id = $1
`

func (q *Queries) GetNormalByCreateby(ctx context.Context, id int32) ([]Normal, error) {
	rows, err := q.query(ctx, q.getNormalByCreatebyStmt, getNormalByCreateby, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Normal
	for rows.Next() {
		var i Normal
		if err := rows.Scan(&i.ID, &i.Createdby); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNormalByID = `-- name: GetNormalByID :one
SELECT id, createdby FROM normal
WHERE id = $1
`

func (q *Queries) GetNormalByID(ctx context.Context, id int32) (Normal, error) {
	row := q.queryRow(ctx, q.getNormalByIDStmt, getNormalByID, id)
	var i Normal
	err := row.Scan(&i.ID, &i.Createdby)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateNormal = `-- name: UpdateNormal :exec
UPDATE normal SET id = $1
`

func (q *Queries) UpdateNormal(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.updateNormalStmt, updateNormal, id)
	return err
}

const updateUsers = `-- name: UpdateUsers :exec
UPDATE users SET id = $1
`

// All Update operations
func (q *Queries) UpdateUsers(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.updateUsersStmt, updateUsers, id)
	return err
}
